package db;

import java.util.*;
import java.io.*;

/**
 * Each instance of HeapPage stores data for one page of HeapFiles and 
 * implements the Page interface that is used by BufferPool.
 *
 * @see HeapFile
 * @see BufferPool
 *
 */
public class HeapPage implements Page {

    HeapPageId pid;
    RowDesc td;
    byte header[];
    Row Rows[];
    int numSlots;

    byte[] oldData;

    /**
     * Create a HeapPage from a set of bytes of data read from disk.
     * The format of a HeapPage is a set of header bytes indicating
     * the slots of the page that are in use, some number of Row slots.
     *  Specifically, the number of Rows is equal to: <p>
     *          floor((BufferPool.PAGE_SIZE*8) / (Row size * 8 + 1))
     * <p> where Row size is the size of Rows in this
     * database table, which can be determined via {@link Catalog#getRowDesc}.
     * The number of 8-bit header words is equal to:
     * <p>
     *      ceiling(no. Row slots / 8)
     * <p>
     * @see Database#getCatalog
     * @see Catalog#getRowDesc
     * @see BufferPool#PAGE_SIZE
     */
    public HeapPage(HeapPageId id, byte[] data) throws IOException {
        this.pid = id;
        this.td = Database.getCatalog().getRowDesc(id.getTableId());
        this.numSlots = getNumRows();
        DataInputStream dis = new DataInputStream(new ByteArrayInputStream(data));

        // allocate and read the header slots of this page
        header = new byte[getHeaderSize()];
        for (int i=0; i<header.length; i++)
            header[i] = dis.readByte();

        try{
            // allocate and read the actual Rows of thisR page
            Rows = new Row[numSlots];
            for (int i=0; i<Rows.length; i++)
                Rows[i] = readNextRow(dis,i);
        }catch(NoSuchElementException e){
            e.printStackTrace();
        }
        dis.close();

        setBeforeImage();
    }

    /** Retrieve the number of Rows on this page.
     @return the number of Rows on this page
     */
    private int getNumRows() {
        // some code goes here
        return 0;

    }

    /**
     * Computes the number of bytes in the header of a page in a HeapFile with each Row occupying RowSize bytes
     * @return the number of bytes in the header of a page in a HeapFile with each Row occupying RowSize bytes
     */
    private int getHeaderSize() {

        // some code goes here
        return 0;

    }

    /** Return a view of this page before it was modified
     -- used by recovery */
    public HeapPage getBeforeImage(){
        try {
            return new HeapPage(pid,oldData);
        } catch (IOException e) {
            e.printStackTrace();
            //should never happen -- we parsed it OK before!
            System.exit(1);
        }
        return null;
    }

    public void setBeforeImage() {
        oldData = getPageData().clone();
    }

    /**
     * @return the PageId associated with this page.
     */
    public HeapPageId getId() {
        // some code goes here
        throw new UnsupportedOperationException("implement this");
    }

    /**
     * Suck up Rows from the source file.
     */
    private Row readNextRow(DataInputStream dis, int slotId) throws NoSuchElementException {
        // if associated bit is not set, read forward to the next Row, and
        // return null.
        if (!isSlotUsed(slotId)) {
            for (int i=0; i<td.getSize(); i++) {
                try {
                    dis.readByte();
                } catch (IOException e) {
                    throw new NoSuchElementException("error reading empty Row");
                }
            }
            return null;
        }

        // read Columns in the Row
        Row t = new Row(td);
        RowId rid = new RowId(pid, slotId);
        t.setRowId(rid);
        try {
            for (int j=0; j<td.numColumns(); j++) {
                Column f = td.getColumnType(j).parse(dis);
                t.setColumn(j, f);
            }
        } catch (java.text.ParseException e) {
            e.printStackTrace();
            throw new NoSuchElementException("parsing error!");
        }

        return t;
    }

    /**
     * Generates a byte array representing the contents of this page.
     * Used to serialize this page to disk.
     * <p>
     * The invariant here is that it should be possible to pass the byte
     * array generated by getPageData to the HeapPage constructor and
     * have it produce an identical HeapPage object.
     *
     * @see #HeapPage
     * @return A byte array correspond to the bytes of this page.
     */
    public byte[] getPageData() {
        int len = BufferPool.PAGE_SIZE;
        ByteArrayOutputStream baos = new ByteArrayOutputStream(len);
        DataOutputStream dos = new DataOutputStream(baos);

        // create the header of the page
        for (int i=0; i<header.length; i++) {
            try {
                dos.writeByte(header[i]);
            } catch (IOException e) {
                // this really shouldn't happen
                e.printStackTrace();
            }
        }

        // create the Rows
        for (int i=0; i<Rows.length; i++) {

            // empty slot
            if (!isSlotUsed(i)) {
                for (int j=0; j<td.getSize(); j++) {
                    try {
                        dos.writeByte(0);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                }
                continue;
            }

            // non-empty slot
            for (int j=0; j<td.numColumns(); j++) {
                Column f = Rows[i].getColumn(j);
                try {
                    f.serialize(dos);

                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        // padding
        int zerolen = BufferPool.PAGE_SIZE - (header.length + td.getSize() * Rows.length); //- numSlots * td.getSize();
        byte[] zeroes = new byte[zerolen];
        try {
            dos.write(zeroes, 0, zerolen);
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            dos.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return baos.toByteArray();
    }

    /**
     * Static method to generate a byte array corresponding to an empty
     * HeapPage.
     * Used to add new, empty pages to the file. Passing the results of
     * this method to the HeapPage constructor will create a HeapPage with
     * no valid Rows in it.
     *
     * @return The returned ByteArray.
     */
    public static byte[] createEmptyPageData() {
        int len = BufferPool.PAGE_SIZE;
        return new byte[len]; //all 0
    }

    /**
     * Delete the specified Row from the page;  the Row should be updated to reflect
     *   that it is no longer stored on any page.
     * @throws DbException if this Row is not on this page, or Row slot is
     *         already empty.
     * @param t The Row to delete
     */
    public void deleteRow(Row t) throws DbException {
        // some code goes here
        // not necessary for lab1
    }

    /**
     * Adds the specified Row to the page;  the Row should be updated to reflect
     *  that it is now stored on this page.
     * @throws DbException if the page is full (no empty slots) or Rowdesc
     *         is mismatch.
     * @param t The Row to add.
     */
    public void insertRow(Row t) throws DbException {
        // some code goes here
        // not necessary for lab1
    }

    /**
     * Marks this page as dirty/not dirty and Row that transaction
     * that did the dirtying
     */
    public void markDirty(boolean dirty, TransactionId tid) {
        // some code goes here
        // not necessary for lab1
    }

    /**
     * Returns the tid of the transaction that last dirtied this page, or null if the page is not dirty
     */
    public TransactionId isDirty() {
        // some code goes here
        // Not necessary for lab1
        return null;
    }

    /**
     * Returns the number of empty slots on this page.
     */
    public int getNumEmptySlots() {
        // some code goes here
        return 0;
    }

    /**
     * Returns true if associated slot on this page is filled.
     */
    public boolean isSlotUsed(int i) {
        // some code goes here
        return false;
    }

    /**
     * Abstraction to fill or clear a slot on this page.
     */
    private void markSlotUsed(int i, boolean value) {
        // some code goes here
        // not necessary for lab1
    }

    /**
     * @return an iterator over all Rows on this page (calling remove on this iterator throws an UnsupportedOperationException)
     * (note that this iterator shouldn't return Rows in empty slots!)
     */
    public Iterator<Row> iterator() {
        // some code goes here
        return null;
    }

}

