package db;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private JoinPredicate jp;
    private DbIterator child1;
    private DbIterator child2;
    private Row currentLeftRow;
    private Project p;

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.jp = p;
        this.child1 = child1;
        this.child2 = child2;
        this.currentLeftRow = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.jp;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     *       ¼´columnName.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getRowDesc().getColumnName(jp.getColumn1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getRowDesc().getColumnName((jp.getColumn2()));
    }

    /**
     * @see db.RowDesc#merge(RowDesc, RowDesc) for possible
     *      implementation logic.
     */
    public RowDesc getRowDesc() {
        // some code goes here
        return db.RowDesc.merge(child1.getRowDesc(), child2.getRowDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();;
        this.child1.open();
        this.child2.open();
    }

    public void close() {
        // some code goes here
        this.child1.close();
        this.child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.child1.rewind();
        this.child2.rewind();
    }

    /**
     * Returns the next Row generated by the join, or null if there are no
     * more Rows. Logically, this is the next Row in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the Rows returned from this particular implementation of Join
     * are simply the concatenation of joining Rows from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one Row is {1,2,3} and the other Row is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching Row.
     * @see JoinPredicate#filter
     */
    protected Row fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        while (currentLeftRow != null || child1.hasNext()) {
            Row leftRow;
            if (currentLeftRow != null) {
                leftRow = currentLeftRow;
            } else {
                currentLeftRow = child1.next();
                leftRow = currentLeftRow;
            }
            while (child2.hasNext()) {
                Row rightRow = child2.next();
                if (jp.filter(leftRow, rightRow)) {
                    return joinRows(leftRow, rightRow);
                }
            }
            currentLeftRow = null;
            child2.rewind();
        }
        return null;
    }



    private Row joinRows(Row leftrow, Row rightrow) {
        int numOfColsLeft = leftrow.getRowDesc().numColumns();
        int numOfColsRight = rightrow.getRowDesc().numColumns();
        Row joinedRow = new Row(getRowDesc());
        for (int i = 0; i < numOfColsLeft; i++) {
            joinedRow.setColumn(i, leftrow.getColumn(i));
        }
        for (int j = numOfColsLeft; j < numOfColsLeft + numOfColsRight; j++) {
            joinedRow.setColumn(j, rightrow.getColumn(j - numOfColsLeft));
        }
//        p = new Project(,,child1);
        return joinedRow;
    }





//    public Project(ArrayList<Integer> ColumnList, ArrayList<Type> typesList,
//                   DbIterator child) {
//        this(ColumnList,typesList.toArray(new Type[]{}),child);
//    }
//
//    public Project(ArrayList<Integer> ColumnList, Type[] types,
//                   DbIterator child) {
//        this.child = child;
//        outColumnIds = ColumnList;
//        String[] ColumnAr = new String[ColumnList.size()];
//        RowDesc childrd = child.getRowDesc();
//
//        for (int i = 0; i < ColumnAr.length; i++) {
//            ColumnAr[i] = childrd.getColumnName(ColumnList.get(i));
//        }
//        rd = new RowDesc(types, ColumnAr);
//    }





//    ArrayList<Integer> duplicateColIndex = new ArrayList<>();
//    ArrayList<Integer> remainedColIndex = new ArrayList<>();
//        for(int i = 0; i < joinedRow.getRowDesc().numColumns(); i++){
//            for(int j = i+1; j < joinedRow.getRowDesc().numColumns(); j++ ){
//                if (joinedRow.getRowDesc().getColumnName(i).equals(joinedRow.getRowDesc().getColumnName(j))){
//                    duplicateColIndex.add(j);
//                }
//            }
//        }
//        for (int i = 0; i < joinedRow.getRowDesc().numColumns(); i++){
//            for(int j = 0; j < duplicateColIndex.size(); j++){
//                if(i != duplicateColIndex.get(j).intValue()){
//                    remainedColIndex.add(i);
//                }
//            }
//        }
//        Type [] types = new Type[remainedColIndex.size()];
//        for(int i = 0; i < types.length; i++){
//            for (int j = 0; j < remainedColIndex.size(); j++){
//                types[i] = joinedRow.getRowDesc().getColumnType(remainedColIndex.get(j));
//            }
//        }
//        String [] columnNames = new String[remainedColIndex.size()];
//        for(int i = 0; i < columnNames.length; i++){
//            for (int j = 0; j < remainedColIndex.size(); j++){
//                columnNames[i] = joinedRow.getRowDesc().getColumnName(remainedColIndex.get(j));
//            }
//        }
//        RowDesc rd = new RowDesc(types,columnNames);
//        Row naturalJoinedRow = new Row(rd);
//        for(int i = 0; i < rd.numColumns(); i++){
//            for(int j = 0; j < remainedColIndex.size(); j++)
//            naturalJoinedRow.setColumn(i, joinedRow.getColumn(remainedColIndex.get(j)));
//        }
//        return naturalJoinedRow;


    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator [] {child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
